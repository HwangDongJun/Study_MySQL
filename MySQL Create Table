/* 코드에 초점을 두고 작성하였습니다. 제가 사용한 SQL은 cmd환경에서 진행을 하였으므로, 직접 코드를 작성하였습니다. */
/* 황동준 */

SQL -> Structed Query Language  =>  MySQL server가 알아들을 수 있는 언어입니다.

1. MySQL의 구조
 - database의 기본적인 형태는 엑셀과 같이 표로 이루어진다고 생각하시면 됩니다.
 - 연관된 자료들을 표에 담고, 표들을 그룹화 해서 관리하는 것이 데이터 베이스에 해당합니다.(database또는 shema라고도 합니다.)
 - 마지막으로 여러 shema들을 관리하는 것이 데이터 베이스 서버(database server)에 해당합니다.
 
2. MySQL shema의 사용
 - database 생성 : CREATE DATABASE 이름;
 - database 제거 : DROP DATABASE 이름;
 - database 확인 : SHOW DATABASES;
 - database 사용 : USE 이름; (이때의 이름은 이미 생성된 database에 해당합니다.)

마지막 USE를 사용함으로써, database에 진입을 하게 되었습니다. // 다음과 같은 코드들은 소문자로도 가능합니다.

3. MySQL 테이블의 생성1
 가장 먼저 USE 이름; 을 통해 database에 진입을 합니다.
 이제 표를 생성해아합니다. 표의 가장 첫줄에는 추가될 데이터의 이름들이 들어갑니다.
 id / title / description / created / author / profile순으로 만들겠습니다.
 
 -> CREATE TABLE topic(
  -> id INT(11) NOT NULL AUTO_INCREMENT,
  -> title VARCHAR(100) NOT NULL,
  -> description TEXT NULL,
  -> created DATETIME NOT NULL,
  -> author VARCHAR(15) NULL,
  -> profile VARCHAR(200) NULL,
  -> PRIMARY KEY(id)
  -> );
  
이로써 테이블의 생성이 끝났습니다. 이제 data의 추가를 하겠습니다.

4. INSERT구문
tip) 구조를 알기 위해서는 DESC topic;을 입력하면 내가 추가한 table의 구성을 확인할 수 있습니다.
+-------------+--------------+------+-----+---------+----------------+
| Field       | Type         | Null | Key | Default | Extra          |
+-------------+--------------+------+-----+---------+----------------+
| id          | int(11)      | NO   | PRI | NULL    | auto_increment |
| title       | varchar(100) | NO   |     | NULL    |                |
| description | text         | YES  |     | NULL    |                |
| created     | datetime     | NO   |     | NULL    |                |
| author      | varchar(15)  | YES  |     | NULL    |                |
| profile     | varchar(200) | YES  |     | NULL    |                |
+-------------+--------------+------+-----+---------+----------------+

추가를 하겠습니다. INSERT INTO를 사용합니다.
INSERT INTO topic (title,description,created,author,profile) VALUES('ORACLE','ORACLE is ...',NOW(),'ruru','developer');
각 구조에 대한 data추가를 위해 VALUES에 값을 넣어줍니다. 여기서 NOW()는 현재 시간을 반환해주는 함수입니다.
이렇게 3개정도를 추가합니다. 그리고 SELECT * FROM topic; 으로 확인이 가능합니다.
+----+--------+---------------+---------------------+--------+-----------+
| id | title  | description   | created             | author | profile   |
+----+--------+---------------+---------------------+--------+-----------+
|  1 | MySQL  | MySQL is ...  | 2018-06-28 01:29:35 | egoing | developer |
|  2 | ORACLE | ORACLE is ... | 2018-06-28 01:32:50 | ruru   | developer |
|  3 | HTML   | HTML is ...   | 2018-06-28 01:50:20 | egoing | developer |
+----+--------+---------------+---------------------+--------+-----------+
여기서 id를 추가하지 않은 이유는 id의 경우 table의 구성요소 추가를 할때 AUTO_INCREMENT로 추가를 하였기 때문에 입력값이 없으면 자동으로 추가가 됩니다.

5. SELECT구문
(1) SELECT id,title,created,author FROM topic;에 대한 출력결과입니다. 
+----+--------+---------------------+--------+
| id | title  | created             | author |
+----+--------+---------------------+--------+
|  1 | MySQL  | 2018-06-28 01:29:35 | egoing |
|  2 | ORACLE | 2018-06-28 01:32:50 | ruru   |
|  3 | HTML   | 2018-06-28 01:50:20 | egoing |
+----+--------+---------------------+--------+

(2) SELECT "abc",1+1;에 대한 출력결과입니다.
+-----+-----+
| abc | 1+1 |
+-----+-----+
| abc |   2 |
+-----+-----+
이와같이 table에 관련된 값이 아닌 기본적인 출력도 가능합니다.

(3) SELECT id,title,created,author FROM topic WHERE author="egoing";에 대한 출력결과입니다.
+----+-------+---------------------+--------+
| id | title | created             | author |
+----+-------+---------------------+--------+
|  1 | MySQL | 2018-06-28 01:29:35 | egoing |
|  3 | HTML  | 2018-06-28 01:50:20 | egoing |
+----+-------+---------------------+--------+
author의 값이 egoing인 것만 필터링을 합니다.

(4) SELECT id,title,created,author FROM topic WHERE author="egoing" ORDER BY id DESC;에 대한 출력결과입니다.
+----+-------+---------------------+--------+
| id | title | created             | author |
+----+-------+---------------------+--------+
|  3 | HTML  | 2018-06-28 01:50:20 | egoing |
|  1 | MySQL | 2018-06-28 01:29:35 | egoing |
+----+-------+---------------------+--------+
id를 기준으로 가장 큰 숫자가 먼저 나오는 것으로 바뀐것을 확인할 수 있습니다. -> DESC때문에 그렇습니다.

(5) SELECT id,title,created,author FROM topic WHERE author="egoing" ORDER BY id DESC LIMIT 1;에 대한 출력결과입니다.
+----+-------+---------------------+--------+
| id | title | created             | author |
+----+-------+---------------------+--------+
|  3 | HTML  | 2018-06-28 01:50:20 | egoing |
+----+-------+---------------------+--------+
LIMIT 1로 인해서 출력결과의 제한을 1개로 줄였으므로, 1개만 출력이 되는 것을 확인할 수 있습니다.

6. UPDATE구문
수정에 관한 방법입니다.
UPDATE topic SET description='ORACLE is', title='Oracle' WHERE id=2; -> WHERE전까지가 기본적인 방법입니다.
WHERE의 경우 id = 2로 위치를 정해주었습니다. WHERE를 추가하지 않고, 실행을 시키게 되면 해당 TABLE의 모든 data의 내용이 바뀌게 됩니다.
매우 주의해야 하는 경우입니다!!

-기존 TABLE
+----+--------+---------------+---------------------+--------+-----------+
| id | title  | description   | created             | author | profile   |
+----+--------+---------------+---------------------+--------+-----------+
|  1 | MySQL  | MySQL is ...  | 2018-06-28 01:29:35 | egoing | developer |
|  2 | ORACLE | ORACLE is ... | 2018-06-28 01:32:50 | ruru   | developer |
|  3 | HTML   | HTML is ...   | 2018-06-28 01:50:20 | egoing | developer |
+----+--------+---------------+---------------------+--------+-----------+
-UPDATE후 TABLE
+----+--------+--------------+---------------------+--------+-----------+
| id | title  | description  | created             | author | profile   |
+----+--------+--------------+---------------------+--------+-----------+
|  1 | MySQL  | MySQL is ... | 2018-06-28 01:29:35 | egoing | developer |
|  2 | Oracle | ORACLE is    | 2018-06-28 01:32:50 | ruru   | developer |
|  3 | HTML   | HTML is ...  | 2018-06-28 01:50:20 | egoing | developer |
+----+--------+--------------+---------------------+--------+-----------+
id가 2인 곳에 title, description의 내용이 바뀐걸 확인할 수 있습니다.

7. DELETE구문
DELETE FROM topic;을 실행하게 되면 모든 data가 삭제가 되므로, 주의!
DELETE FROM topic WHERE id=3;을 실행하게 되면 id가 3인 부분이 사라지게 됩니다.(해당 예시는 보이지 않겠습니다.)

8. RENAME구문
RENAME TABLE topic TO topic_backup;으로 인해 topic의 이름이 topic_backup의 이름으로 바뀌게 됩니다.
+-------------------+
| Tables_in_tempone |
+-------------------+
| topic_backup      |
+-------------------+
SHOW TABLES;로 확인한 결과입니다.

★관계형데이터베이스의 필요성
 - 매우 많은 데이터를 다루게 되는 경우 data의 중복은 개선이 필요하다는 의미입니다. 하지만 매우 많은 data의 중복이므로, 수정은 매우 어렵습니다.
 여기서 관계형데이터베이스는 서로간의 data가 관계를 맺음으로써, 명령어 1개로 수정이 가능하게 됩니다. => 이게 MySQL입니다.
 
 또 다른 특징은 분산된 데이터를 보여줄 경우 사용자가 편하게 하나로 보여줄 수 있는 것도 MySQL입니다.
 
 9. JOIN - 관계형데이터베이스의 꽃
 mysql> SELECT * FROM topic;
+----+------------+-------------------+---------------------+-----------+
| id | title      | description       | created             | author_id |
+----+------------+-------------------+---------------------+-----------+
|  1 | MySQL      | MySQL is ...      | 2018-06-28 23:01:12 |         1 |
|  2 | Oracle     | Oracle is ...     | 2018-06-28 23:03:17 |         1 |
|  3 | SQL Server | SQL Server is ... | 2018-06-28 23:03:31 |         2 |
|  4 | PostgreSQL | PostgreSQL is ... | 2018-06-28 23:03:41 |         3 |
|  5 | MongoDB    | MongoDB is ...    | 2018-06-28 23:03:50 |         1 |
+----+------------+-------------------+---------------------+-----------+

mysql> SELECT * FROM author;
+----+--------+---------------------------+
| id | name   | profile                   |
+----+--------+---------------------------+
|  1 | egoing | developer                 |
|  2 | duru   | database administrator    |
|  3 | taeho  | data scientist, developer |
+----+--------+---------------------------+

가장 먼저 위와 같이 2개의 TABLE을 생성합니다. author_id를 통해서 author TABLE과 연관이 되어있습니다. 분산된 데이터입니다.

SELECT * FROM topic LEFT JOIN author ON topic.author_id = author.id; 이와 같은 코드로 아래와 같은 TABLE을 도출할 수 있습니다.
+----+------------+-------------------+---------------------+-----------+------+--------+---------------------------+
| id | title      | description       | created             | author_id | id   | name   | profile                   |
+----+------------+-------------------+---------------------+-----------+------+--------+---------------------------+
|  1 | MySQL      | MySQL is ...      | 2018-06-28 23:01:12 |         1 |    1 | egoing | developer                 |
|  2 | Oracle     | Oracle is ...     | 2018-06-28 23:03:17 |         1 |    1 | egoing | developer                 |
|  5 | MongoDB    | MongoDB is ...    | 2018-06-28 23:03:50 |         1 |    1 | egoing | developer                 |
|  3 | SQL Server | SQL Server is ... | 2018-06-28 23:03:31 |         2 |    2 | duru   | database administrator    |
|  4 | PostgreSQL | PostgreSQL is ... | 2018-06-28 23:03:41 |         3 |    3 | taeho  | data scientist, developer |
+----+------------+-------------------+---------------------+-----------+------+--------+---------------------------+
한번에 볼 수 있는 아주 편한 기능입니다.

SELECT topic.id,title,description,created,name,profile FROM topic LEFT JOIN author ON topic.author_id = author.id;
+----+------------+-------------------+---------------------+--------+---------------------------+
| id | title      | description       | created             | name   | profile                   |
+----+------------+-------------------+---------------------+--------+---------------------------+
|  1 | MySQL      | MySQL is ...      | 2018-06-28 23:01:12 | egoing | developer                 |
|  2 | Oracle     | Oracle is ...     | 2018-06-28 23:03:17 | egoing | developer                 |
|  5 | MongoDB    | MongoDB is ...    | 2018-06-28 23:03:50 | egoing | developer                 |
|  3 | SQL Server | SQL Server is ... | 2018-06-28 23:03:31 | duru   | database administrator    |
|  4 | PostgreSQL | PostgreSQL is ... | 2018-06-28 23:03:41 | taeho  | data scientist, developer |
+----+------------+-------------------+---------------------+--------+---------------------------+
필요없는 data인 author_id와 author TABLE의 id를 지우는 코드입니다. *대신에 topic.id,title,description,created,name,profile를 추가하였습니다.
topic.id는 author TABLE에도 id가 존재하기 때문에 구분을 해주기 위해서 입니다.

마지막으로 TABLE을 보여줄 때, 안의 이름을 바꾸고 싶다면 topic.id AS topic_id를 사용해서 바꿀 수 있습니다.
SELECT topic.id AS topic_id,title,description,created,name,profile FROM topic LEFT JOIN author ON topic.author_id = author.id;
+----------+------------+-------------------+---------------------+--------+---------------------------+
| topic_id | title      | description       | created             | name   | profile                   |
+----------+------------+-------------------+---------------------+--------+---------------------------+
|        1 | MySQL      | MySQL is ...      | 2018-06-28 23:01:12 | egoing | developer                 |
|        2 | Oracle     | Oracle is ...     | 2018-06-28 23:03:17 | egoing | developer                 |
|        5 | MongoDB    | MongoDB is ...    | 2018-06-28 23:03:50 | egoing | developer                 |
|        3 | SQL Server | SQL Server is ... | 2018-06-28 23:03:31 | duru   | database administrator    |
|        4 | PostgreSQL | PostgreSQL is ... | 2018-06-28 23:03:41 | taeho  | data scientist, developer |
+----------+------------+-------------------+---------------------+--------+---------------------------+
